@import 'settings/settings-typography';

// Tools - Helpers
// -------------------------

// Functions
// -------------------------

/// @function t-rem
/// Returns a single or series of values represented as rem unit(s).
///
/// @access public
/// @param {Number} $values	- A single, or space separated list of Numbers specified using any valid unit type.
/// @return {Number} - The original value(s) converted into rem unit(s).
///
/// @example
/// t-rem(2em 20px 2rem 20px);
@function t-rem($values) {

	@if type-of($values) == 'list' {
		$rems: ();

		@each $value in $values {
			$rems: append($rems, t-rem($value));
		}

		@return $rems;
	}

	@if type-of($values) == 'number' {
		@if $values == 0 {
			@return $values;
		}
		@else if unit($values) == px {
			@return ($values / $s-base-font-size) * 1rem;
		}
	}

	@return $values;
}

// Mixins
// -------------------------

/// @mixin t-maintain-aspect-ratio
/// Provides a locked ratio container in which the first child will be positioned according to the $alignX and $alignY arguments.
///
/// @access public
/// @param {Number} $width - The relative width of the container.
/// @param {Number} $height - The relative height of the container.
/// @param {Number} $alignX - The relative x position within the container of the first child element, should be between 0 and 1.
/// @param {Number} $alignY - The relative y position within the container of the first child element, should be between 0 and 1.
///
/// @example
/// @include t-maintain-aspect-ratio(16, 9);
@mixin t-maintain-aspect-ratio($width, $height, $alignX: 0.5, $alignY: 0.5) {
	$x: $alignX * 100;
	$y: $alignY * 100;

	overflow: hidden;
	position: relative;
	
	&::before {
		content: '';
		display: block;
		padding-top: ($height / $width) * 100%;
		width: 100%;
	}
	
	> :first-child {
		left: $x * 1%;
		margin: 0;
		max-width: 100%;
		position: absolute;
		top: $y * 1%;
		transform: translate($x * -1%, $y * -1%);
		width: 100%;
	}
}

/// @mixin t-active
/// Standardises pseudo states for accessibility.
///
/// @access public
///
/// @example
///	@include t-active;
@mixin t-active {

	&:hover,
	&:focus,
	&:active {
		@content;
	}
}

/// @mixin t-flex-image
/// Apply to basic responsive flexible image styling.
///
/// @access public
///
/// @example
///	@include t-flex-image;
@mixin t-flex-image {
	max-width: 100%;
	width: 100%;
}

/// @mixin t-hidden
/// Visibly hide elements without removing the target element from the render tree.
///
/// @access public
///
/// @example
///	@include t-hidden;
@mixin t-hidden {
	left: -9999px;
	position: absolute;
}

/// @mixin t-hidden-text
/// Visibly hide text without removing the target element from the render tree.
///
/// @access public
///
/// @example
///	@include t-hidden-text;

/* stylelint-disable declaration-no-important */
@mixin t-hidden-text {
	font-size: 0!important;
	line-height: 0!important;
}

/* stylelint-enable */

/// @mixin t-align-text
/// Aligns text adding any additional RTL styles if applicable.
///
/// @access public
///
/// @example
///	@include t-align-text;
@mixin t-align-text($align: start) {

	@if ($align == start) {
		text-align: left;

		[dir='rtl'] & {
			text-align: right;
		}
	}
	@else if ($align == end) {
		text-align: right;

		[dir='rtl'] & {
			text-align: left;
		}
	}
	@else {
		text-align: $align;
	}
}

@mixin t-absolute-center($use3d: false) {
	left: 50%;
	position: absolute;
	top: 50%;

	@if $use3d == true {
		transform: translate3d(-50%, -50%, 0);
	}
	@else {
		transform: translate(-50%, -50%);
	}
	
}

@mixin t-last-child {
	
	> :last-child {
		margin-bottom: 0;
	}
}

@mixin t-hide-no-js {

	.no-js & {
		display: none;
	}
}