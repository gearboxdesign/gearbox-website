// Tools - Layout
// -------------------------

@import '~settings/settings-colours';
@import '~settings/settings-layout';
@import '~settings/settings-media';
@import '~tools/tools-helpers';
@import '~tools/tools-media';
@import '~tools/tools-utils';

// Functions
// -------------------------

/// @function t-get-vertical-spacing-type-adjust
/// Returns the difference between the font-size and line-height for a given breakpoint.
///
/// @access public
/// @param {String} $type-size- A String which represents a type size label in the $s-type-sizing map.
/// @param {String} - A String which represents a breakpoint label of the give $type-size within the $s-type-sizing map.
/// @return {Number} - The difference between font-size and line-height expressed in the appropriate unit.
///
/// @example
/// t-get-vertical-spacing-type-adjust(small, medium);
@function t-get-vertical-spacing-type-adjust($type-size, $breakpoint-name) {

	@if (type-of($s-colours) == map) {
		$font-size: t-map-value($s-type-sizing, ($type-size, $breakpoint-name, font-size));
		$line-height: t-map-value($s-type-sizing, ($type-size, $breakpoint-name, line-height));

		@if unitless($line-height) {
			$line-height: $line-height * $font-size;
		}

		@return ($line-height - $font-size) / 2;
	}
	@else {
		@warn('$s-type-sizing must be a valid map.');
	}

	@return null;
}

/// @function t-get-vertical-spacing
/// Returns the correct spacing units for a given spacing and breakpoint label with an optional type size adjustment.
///
/// @access public
/// @param {String} $spacing-name - A String which represents a spacing label in the $s-vertical-spacing map.
/// @param {String} $breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map in which to reference the correct result.
/// @param {String} $type-size - A String which represents a type size label in the $s-type-sizing map. (Optional)
/// @return {Number} - The difference between font-size and line-height expressed in the appropriate unit.
///
/// @example
/// t-get-vertical-spacing(small, medium);
@function t-get-vertical-spacing($spacing-name, $breakpoint-name: small, $type-size: null) {

	@if (type-of($s-breakpoints) == map and type-of($s-vertical-spacing) == map) {

		@if (map-has-key($s-breakpoints, $breakpoint-name)) {
			$spacing: t-map-value($s-vertical-spacing, ($spacing-name, $breakpoint-name));
			$adjust: 0;

			@if ($type-size != null) {
				$adjust: t-get-vertical-spacing-type-adjust($type-size, $breakpoint-name);
			}

			@return t-rem($spacing - $adjust);
		}

		@return null;
	}
	@else {
		@warn('$s-breakpoints and $s-vertical-spacing must be valid maps.');
	}

	@return null;
}


// Mixins
// -------------------------

/// @mixin t-vertical-spacing
/// Provides the correct vertical spacing to all referenced breakpoints from cross referencing $s-breakpoints and $s-vertical-spacing maps with an optional $type-size parameter to adjust for line height differences.
///
/// @access public
/// @param {String} $spacing-name - A String which represents a spacing label in the $s-vertical-spacing map.
/// @param {List} $props - A List of CSS properties in which to apply the resulting units.
/// @param {String} $type-size - A String which represents a type size label in the $s-type-sizing map. (Optional)
/// @param {String} $default-breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map in which to apply default styling. (Optional)
///
/// @example
///	@include t-vertical-spacing(small, (margin-bottom, padding-bottom));
@mixin t-vertical-spacing($spacing-name, $props, $type-size: null, $default-breakpoint-name: 'small') {

	@each $prop in $props {


		$default-spacing: t-get-vertical-spacing($spacing-name, $default-breakpoint-name, $type-size);

		@if ($default-spacing != null) {
			#{$prop}: $default-spacing;
		}
	}

	@if (type-of($s-vertical-spacing) == map) {

		@each $breakpoint-name in map-keys(map-get($s-vertical-spacing, $spacing-name)) {

			@if $breakpoint-name != $default-breakpoint-name {

				$spacing: t-get-vertical-spacing($spacing-name, $breakpoint-name, $type-size);

				@if ($spacing != null) {
					@include t-respond-to-min($breakpoint-name) {

						@each $prop in $props {
							#{$prop}: $spacing;
						}
					}
				}
			}
		}
	}
	@else {
		@warn('$s-vertical-spacing must be a valid map.');
	}
}

/// @mixin t-layer
/// Provides the correct global z-index given a level parameter and optional modifier.
///
/// @access public
/// @param {Number} $level - A key which identifies the base z-index.
/// @param {Number} $modifier - An optional modifier to increase the base z-index level by the given number.
///
/// @example
/// @include t-layer(2, 1);
@mixin t-layer($level: 0, $modifier: 0) {
	
	@if (type-of($s-layers) == map) {
		z-index: map-get($s-layers, $level) + $modifier;
	}
	@else {
		@warn('$s-layers must be a valid map.');
	}
}

/// @mixin t-constraint
/// Provides a universal max-width constraint for elements.
///
/// @access public
/// @param {Number} $width - The constraint width.
/// @param {Number} $gutter-width - The outer gutter width.
///
/// @example
/// @include t-constraint;
@mixin t-constraint ($min-width: map-get($s-site-width, min), $max-width: map-get($s-site-width, max), $min-gutter: $s-base-gutter, $max-gutter: $s-base-gutter) {
	margin: 0 auto;
	max-width: t-rem($min-width);
	padding-left: t-rem($min-gutter);
	padding-right: t-rem($min-gutter);
	width: 100%;

	@include t-respond-to-min(small) {
		padding-left: t-rem($max-gutter);
		padding-right: t-rem($max-gutter);
	}

	@include t-respond-to-min(medium) {
		max-width: t-rem($max-width);
	}
}

@mixin t-panel {
	@include t-vertical-spacing(large, (padding-top, padding-bottom));
	padding-left: t-rem($s-base-gutter);
	padding-right: t-rem($s-base-gutter);
}