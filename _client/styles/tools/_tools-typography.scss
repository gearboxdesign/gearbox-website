// Tools - Typography
// -------------------------

@import '~settings/settings-typography';
@import '~tools/tools-utils';

// Functions
// -------------------------

/// @function t-font
/// Returns a matching font-family stack from the $s-fonts map.
///
/// @access public
/// @param {String} $font-name - A String which represents a font-family label in the $s-fonts map specifying the required font stack.
///
/// @example
///	@include t-font('FontName');
@function t-font($font-name) {

	@return unquote(t-map-value($s-fonts, ($font-name, stack)));
}

// Mixins
// -------------------------

/// @mixin t-type-size
/// Get the font-size and line-height for an element from a given map key and specific breakpoint label.
///
/// @access public
/// @param {String} $type-size - A String which represents a type-size label in the $s-type-sizing map specifying the required type size.
/// @param {String} $breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map specifying the required breakpoint size.
///
/// @example
///	@include t-type-size(type-size, small);
@mixin t-type-size($type-size, $breakpoint-name: 'small') {

	@if (type-of($s-type-sizing) == map) {
		font-size: t-rem(t-map-value($s-type-sizing, ($type-size, $breakpoint-name, font-size)));
		line-height: t-rem(t-map-value($s-type-sizing, ($type-size, $breakpoint-name, line-height)));
	}
	@else {
		@warn('$s-type-sizing must be a valid map.');
	}
}

/// @mixin t-responsive-type-size
/// Get the font-size and line-height for an element for all breakpoints.
///
/// @access public
/// @param {String} $type-size - A String which represents a type-size label in the $s-type-sizing map specifying the required type size.
/// @param {String} $default-breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map in which to apply default styling. (Optional)
/// @example
///	@include t-responsive-type-size('type-size');
@mixin t-responsive-type-size($type-size, $default-breakpoint-name: 'small') {

	@include t-type-size($type-size, $default-breakpoint-name);

	@if (type-of($s-type-sizing) == map) {
		
		@each $breakpoint-name in map-keys(map-get($s-type-sizing, $type-size)) {
			@if $breakpoint-name != $default-breakpoint-name and breakpoint($breakpoint-name) != null {
				@include t-respond-to-min(t-map-value($s-breakpoints, ($breakpoint-name, size))) {
					@include t-type-size($type-size, $breakpoint-name);
				}
			}
		}
	}
	@else {
		@warn('$s-type-sizing must be a valid map.');
	}
}